name: Samba Container Image CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    - cron: '0 2 * * *'

env:
  CONTAINER_CMD: docker

jobs:

  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    # We need a newer version of shellcheck to avoid problems with the
    # relative imports. Our scripts work on v0.7.2 and up but not the
    # v0.7.0 preinstalled in the ubutnu image
    - name: Update shellcheck
      run: |
        shellcheck_version="v0.8.0"
        url="https://github.com/koalaman/shellcheck/releases/download/${shellcheck_version}/shellcheck-${shellcheck_version}.linux.x86_64.tar.xz"
        curl -Lo /tmp/shellcheck.tar.xz "$url"
        mkdir /tmp/shellcheck
        tar -xf /tmp/shellcheck.tar.xz -C /tmp/shellcheck
        mkdir -p ~/bin
        install -m0755 /tmp/shellcheck/shellcheck-${shellcheck_version}/shellcheck  ~/bin/shellcheck
    - name: Show shellcheck version
      run: $HOME/bin/shellcheck --version
    - name: Run static check tools
      run: make check SHELLCHECK=$HOME/bin/shellcheck

  build-server:
    runs-on: ubuntu-latest
    env:
      BUILDAH_FORMAT: oci
    steps:
    - uses: actions/checkout@v3
    - name: Build the server image
      run: make build-server
    - name: Upload server image
      uses: ishworkh/docker-image-artifact-upload@v1
      with:
        image: "samba-container:latest"
        retention_days: 1

  build-ad-server:
    runs-on: ubuntu-latest
    env:
      BUILDAH_FORMAT: oci
    steps:
    - uses: actions/checkout@v3
    - name: Build the ad server image
      run: make build-ad-server
    - name: Upload ad server image
      uses: ishworkh/docker-image-artifact-upload@v1
      with:
        image: "samba-ad-container:latest"
        retention_days: 1

  build-client:
    runs-on: ubuntu-latest
    env:
      BUILDAH_FORMAT: oci
    steps:
    - uses: actions/checkout@v3
    - name: Build the client image
      run: make build-client

  build-toolbox:
    runs-on: ubuntu-latest
    env:
      BUILDAH_FORMAT: oci
    steps:
    - uses: actions/checkout@v3
    - name: Build the client image
      run: make build-toolbox

  test-server:
    needs: build-server
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download server image
      uses: ishworkh/docker-image-artifact-download@v1
      with:
        image: "samba-container:latest"
    - name: Test the server image
      run: tests/test-samba-container.sh

  # Reminder: the nightly-server images consume nightly samba rpm builds
  # it is not *just* an image that gets built nightly
  build-nightly-server:
    runs-on: ubuntu-latest
    env:
      BUILDAH_FORMAT: oci
    steps:
    - uses: actions/checkout@v3
    - name: Build the nightly server image
      run: make build-nightly-server
    - name: Upload nightly server image
      uses: ishworkh/docker-image-artifact-upload@v1
      with:
        image: "samba-container:nightly"
        retention_days: 1

  build-nightly-ad-server:
    runs-on: ubuntu-latest
    env:
      BUILDAH_FORMAT: oci
    steps:
    - uses: actions/checkout@v3
    - name: Build the nightly ad server image
      run: make build-nightly-ad-server
    - name: Upload nightly ad server image
      uses: ishworkh/docker-image-artifact-upload@v1
      with:
        image: "samba-ad-container:nightly"
        retention_days: 1

  test-nightly-server:
    needs: build-nightly-server
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Download nightly server image
      uses: ishworkh/docker-image-artifact-download@v1
      with:
        image: "samba-container:nightly"
    - name: Test the nightly server image
      run: LOCAL_TAG=samba-container:nightly tests/test-samba-container.sh

  test-ad-server-kubernetes:
    needs:
      - build-ad-server
      - build-server
    #runs-on: ubuntu-latest
    # need to explicitly use 20.04 to avoid problems with jq...
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v3
    - uses: nolar/setup-k3d-k3s@v1
    - name: get nodes
      run: kubectl get nodes
    - name: Download ad server image
      uses: ishworkh/docker-image-artifact-download@v1
      with:
        image: "samba-ad-container:latest"
    - name: import ad server image
      run: k3d image import samba-ad-container:latest
    - name: Download file server image
      uses: ishworkh/docker-image-artifact-download@v1
      with:
        image: "samba-container:latest"
    - name: import file server image
      run: k3d image import samba-container:latest
    - name: run the ad-dc deployment test
      run: ./tests/test-samba-ad-server-kubernetes.sh

  test-nightly-ad-server-kubernetes:
      needs:
        - build-nightly-ad-server
        - build-nightly-server
      #runs-on: ubuntu-latest
      # need to explicitly use 20.04 to avoid problems with jq...
      runs-on: ubuntu-20.04
      env:
        IMG_TAG: nightly
      steps:
      - uses: actions/checkout@v3
      - uses: nolar/setup-k3d-k3s@v1
      - name: get nodes
        run: kubectl get nodes
      - name: Download nightly ad server image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "samba-ad-container:nightly"
      - name: import nightly ad server image
        run: k3d image import samba-ad-container:nightly
      - name: Download nightly file server image
        uses: ishworkh/docker-image-artifact-download@v1
        with:
          image: "samba-container:nightly"
      - name: import nightly file server image
        run: k3d image import samba-container:nightly
      - name: run the ad-dc deployment test
        run: ./tests/test-samba-ad-server-kubernetes.sh

  push:
    # verify it passes the test jobs first
    needs:
      - build-client
      - build-toolbox
      - test-server
      - test-nightly-server
      - test-ad-server-kubernetes
      - test-nightly-ad-server-kubernetes
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' || github.event_name == 'schedule') && github.repository == 'samba-in-kubernetes/samba-container'
    steps:
      - uses: actions/checkout@v3
      - name: log in to quay.io
        run: docker login -u "${{ secrets.QUAY_USER }}" -p "${{ secrets.QUAY_PASS }}" quay.io
      - name: push server image
        run: make push-server
      - name: push ad-server image
        run: make push-ad-server
      - name: push client image
        run: make push-client
      - name: push toolbox image
        run: make push-toolbox
      - name: push nightly server image
        run: make push-nightly-server
      - name: push nightly ad server image
        run: make push-nightly-ad-server
